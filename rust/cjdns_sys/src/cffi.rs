/* automatically generated by rust-bindgen 0.55.1 */

#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]

extern "C" {
    pub fn Assert_failure(format: *const ::std::os::raw::c_char, ...);
}
pub type Allocator_OnFreeCallback = ::std::option::Option<
    unsafe extern "C" fn(job: *mut Allocator_OnFreeJob) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Allocator_OnFreeJob {
    pub callback: Allocator_OnFreeCallback,
    pub userData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Allocator {
    pub fileName: *const ::std::os::raw::c_char,
    pub lineNum: ::std::os::raw::c_int,
    pub isFreeing: ::std::os::raw::c_int,
}
pub type Allocator_t = Allocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Allocator_Allocation {
    pub size: usize,
}
extern "C" {
    pub fn Allocator_getChild(
        alloc: *mut Allocator,
        childNumber: ::std::os::raw::c_int,
    ) -> *mut Allocator;
}
extern "C" {
    pub fn Allocator_getAllocation(
        alloc: *mut Allocator,
        allocNum: ::std::os::raw::c_int,
    ) -> *mut Allocator_Allocation;
}
extern "C" {
    pub fn Allocator__malloc(
        allocator: *mut Allocator,
        length: ::std::os::raw::c_ulong,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Allocator__calloc(
        alloc: *mut Allocator,
        length: ::std::os::raw::c_ulong,
        count: ::std::os::raw::c_ulong,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Allocator__realloc(
        allocator: *mut Allocator,
        original: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Allocator__clone(
        allocator: *mut Allocator,
        toClone: *const ::std::os::raw::c_void,
        length: ::std::os::raw::c_ulong,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Allocator__child(
        alloc: *mut Allocator,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    ) -> *mut Allocator;
}
extern "C" {
    pub fn Allocator__free(
        alloc: *mut Allocator,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Allocator__onFree(
        alloc: *mut Allocator,
        callback: Allocator_OnFreeCallback,
        context: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Allocator_OnFreeJob;
}
extern "C" {
    pub fn Allocator_cancelOnFree(toRemove: *mut Allocator_OnFreeJob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Allocator_onFreeComplete(onFreeJob: *mut Allocator_OnFreeJob);
}
extern "C" {
    pub fn Allocator__adopt(
        parentAlloc: *mut Allocator,
        alloc: *mut Allocator,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Allocator__disown(
        parentAlloc: *mut Allocator,
        allocToDisown: *mut Allocator,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Allocator_setCanary(alloc: *mut Allocator, value: usize);
}
extern "C" {
    pub fn Allocator_bytesAllocated(allocator: *mut Allocator) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn Allocator_snapshot(alloc: *mut Allocator, includeAllocations: ::std::os::raw::c_int);
}
pub type Allocator_Provider = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        original: *mut Allocator_Allocation,
        size: ::std::os::raw::c_ulong,
        group: *mut Allocator,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn Allocator_new(
        sizeLimit: ::std::os::raw::c_ulong,
        provider: Allocator_Provider,
        providerContext: *mut ::std::os::raw::c_void,
        fileName: *const ::std::os::raw::c_char,
        lineNum: ::std::os::raw::c_int,
    ) -> *mut Allocator;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Error_e {
    Error_NONE = 0,
    Error_MALFORMED_ADDRESS = 1,
    Error_FLOOD = 2,
    Error_LINK_LIMIT_EXCEEDED = 3,
    Error_OVERSIZE_MESSAGE = 4,
    Error_RUNT = 5,
    Error_AUTHENTICATION = 6,
    Error_INVALID = 7,
    Error_UNDELIVERABLE = 8,
    Error_LOOP_ROUTE = 9,
    Error_RETURN_PATH_INVALID = 10,
    Error_UNHANDLED = 11,
    Error_OVERFLOW = 12,
    Error_INTERNAL = 13,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Error_s {
    pub e: Error_e,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Er_Ret {
    pub message: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn Er__raise(
        file: *mut ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        alloc: *mut Allocator,
        format: *mut ::std::os::raw::c_char,
        ...
    ) -> *mut Er_Ret;
}
extern "C" {
    pub fn Er__assertFail(er: *mut Er_Ret);
}
pub type size_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn Bits_log2x64_stupid(number: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bits_memmem(
        haystack: *const ::std::os::raw::c_void,
        haystackLen: size_t,
        needle: *const ::std::os::raw::c_void,
        needleLen: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Message {
    pub length: i32,
    pub padding: i32,
    pub bytes: *mut u8,
    pub capacity: i32,
    pub associatedFd: ::std::os::raw::c_int,
    pub currentIface: *mut Iface,
    pub alloc: *mut Allocator,
}
extern "C" {
    pub fn Message_new(
        messageLength: u32,
        amountOfPadding: u32,
        alloc: *mut Allocator,
    ) -> *mut Message;
}
extern "C" {
    pub fn Message_setAssociatedFd(msg: *mut Message, fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Message_getAssociatedFd(msg: *mut Message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Message_clone(toClone: *mut Message, alloc: *mut Allocator) -> *mut Message;
}
extern "C" {
    pub fn Message_copyOver(output: *mut Message, input: *mut Message, allocator: *mut Allocator);
}
pub type Iface_Callback = ::std::option::Option<
    unsafe extern "C" fn(message: *mut Message, thisInterface: *mut Iface) -> Error_s,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Iface {
    pub send: Iface_Callback,
    pub currentMsg: *mut Message,
    pub connectedIf: *mut Iface,
}
pub type Iface_t = Iface;
extern "C" {
    pub fn Iface_incomingFromRust(message: *mut Message, thisInterface: *mut Iface) -> Error_s;
}
extern "C" {
    pub fn RustIface_gotIncoming();
}
extern "C" {
    pub fn RustIface_gotOutgoing();
}
extern "C" {
    pub fn RustIface_dropped();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBindings_Whitelist {
    pub a: Allocator_t,
    pub b: Iface_t,
}
